name: Frontend Production Deployment for Converxa Chat

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - both
          - prod
          - internal
        default: 'both'

env:
  DEPLOY_HOST: 137.184.44.230
  DEPLOY_USER: root
  SSH_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
  FRONTEND_REPO: https://github.com/ConverxaDevTeam/chat-frontend.git
  FRONTEND_DIR: /root/repos/converxa-chat-frontend

jobs:
  frontend-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout backend repository (for workflow)
        uses: actions/checkout@v4

      - name: Deploy Frontend to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            echo "=== FRONTEND DEPLOYMENT INICIADO ==="
            echo "Ambiente: ${{ github.event.inputs.environment || 'both' }}"
            echo "Timestamp: $(date)"
            echo "========================================"

            # Crear directorios necesarios
            mkdir -p /var/www/frontend/prod
            mkdir -p /var/www/frontend/internal
            mkdir -p /var/log/nginx

            # Clonar o actualizar repositorio del frontend
            if [ ! -d "${{ env.FRONTEND_DIR }}" ]; then
                echo "🔄 Clonando repositorio del frontend..."
                cd /root/repos
                git clone ${{ env.FRONTEND_REPO }} converxa-chat-frontend
            else
                echo "🔄 Actualizando repositorio del frontend..."
                cd ${{ env.FRONTEND_DIR }}
                git fetch origin
                git checkout main
                git pull origin main
                git reset --hard HEAD
            fi

            cd ${{ env.FRONTEND_DIR }}

            echo "=== INFORMACIÓN DEL REPOSITORIO ==="
            echo "Commit actual: $(git rev-parse --short HEAD)"
            echo "Último commit: $(git log --oneline -1)"
            echo "===================================="

            # Verificar si Node.js está instalado
            if ! command -v node &> /dev/null; then
                echo "🔄 Instalando Node.js..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                apt-get install -y nodejs
            fi

            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"

            # Instalar dependencias
            echo "🔄 Instalando dependencias..."
            npm ci

            # Determinar qué ambientes buildear
            DEPLOY_ENV="${{ github.event.inputs.environment || 'both' }}"

            if [ "$DEPLOY_ENV" = "prod" ] || [ "$DEPLOY_ENV" = "both" ]; then
                echo "=== BUILDING FRONTEND PARA PRODUCCIÓN ==="

                # Crear archivo .env para producción
                cat > .env.production << 'PROD_ENV_EOF'
            VITE_API_URL=https://back.converxa.com
            VITE_ENVIRONMENT=production
            VITE_APP_NAME=Converxa Chat
            VITE_WSS_URL=wss://back.converxa.com
            VITE_FILES_URL=https://back.converxa.com/files
            PROD_ENV_EOF

                # Build para producción
                npm run build -- --mode production

                # Desplegar a directorio de producción
                rm -rf /var/www/frontend/prod/*
                cp -r dist/* /var/www/frontend/prod/

                echo "✅ Frontend de producción deployado"
            fi

            if [ "$DEPLOY_ENV" = "internal" ] || [ "$DEPLOY_ENV" = "both" ]; then
                echo "=== BUILDING FRONTEND PARA PRUEBAS INTERNAS ==="

                # Crear archivo .env para interno
                cat > .env.staging << 'INTERNAL_ENV_EOF'
            VITE_API_URL=https://internal-back.converxa.com
            VITE_ENVIRONMENT=staging
            VITE_APP_NAME=Converxa Chat - Internal
            VITE_WSS_URL=wss://internal-back.converxa.com
            VITE_FILES_URL=https://internal-back.converxa.com/files
            INTERNAL_ENV_EOF

                # Build para interno
                npm run build -- --mode staging

                # Desplegar a directorio interno
                rm -rf /var/www/frontend/internal/*
                cp -r dist/* /var/www/frontend/internal/

                echo "✅ Frontend interno deployado"
            fi

            # Verificar deployment
            echo "=== VERIFICACIÓN DE DEPLOYMENT ==="
            echo "Archivos en producción:"
            ls -la /var/www/frontend/prod/ | head -5

            if [ "$DEPLOY_ENV" = "internal" ] || [ "$DEPLOY_ENV" = "both" ]; then
                echo "Archivos en interno:"
                ls -la /var/www/frontend/internal/ | head -5
            fi

            # Verificar configuración de Nginx
            if nginx -t; then
                echo "✅ Configuración de Nginx válida"
                systemctl reload nginx
                echo "✅ Nginx recargado"
            else
                echo "❌ Error en configuración de Nginx"
                exit 1
            fi

      - name: Update Nginx Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            echo "=== CONFIGURACIÓN DE NGINX PARA FRONTEND ==="

            # Crear configuración de frontend para Nginx
            cat > /etc/nginx/sites-available/frontend.conf << 'FRONTEND_NGINX_EOF'
            # Frontend Producción
            server {
                listen 80;
                server_name app.converxa.com;

                root /var/www/frontend/prod;
                index index.html;

                # Configuración para SPA (Single Page Application)
                location / {
                    try_files $uri $uri/ /index.html;
                }

                # Cache para assets estáticos
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }

                # API calls proxy (fallback si es necesario)
                location /api/ {
                    proxy_pass https://back.converxa.com;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }

                # Headers de seguridad
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;

                # Logs
                access_log /var/log/nginx/frontend-prod-access.log;
                error_log /var/log/nginx/frontend-prod-error.log;
            }

            # Frontend Interno
            server {
                listen 80;
                server_name internal-app.converxa.com;

                root /var/www/frontend/internal;
                index index.html;

                # Configuración para SPA
                location / {
                    try_files $uri $uri/ /index.html;
                }

                # Cache menor para desarrollo
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    expires 1h;
                    add_header Cache-Control "public";
                }

                # API calls proxy
                location /api/ {
                    proxy_pass https://internal-back.converxa.com;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }

                # Headers de seguridad
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-Environment "internal-testing" always;

                # Logs
                access_log /var/log/nginx/frontend-internal-access.log;
                error_log /var/log/nginx/frontend-internal-error.log;
            }
            FRONTEND_NGINX_EOF

            # Habilitar configuración
            ln -sf /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf

            # Verificar y recargar Nginx
            if nginx -t; then
                systemctl reload nginx
                echo "✅ Configuración de frontend aplicada"
            else
                echo "❌ Error en configuración de Nginx"
                exit 1
            fi

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            echo "=== VERIFICACIÓN FINAL ==="
            echo "Estado de Nginx:"
            systemctl status nginx --no-pager
            echo ""

            echo "Sitios habilitados:"
            ls -la /etc/nginx/sites-enabled/
            echo ""

            echo "Verificación de archivos frontend:"
            echo "Producción (primeros 3 archivos):"
            ls -la /var/www/frontend/prod/ | head -3
            echo ""

            echo "Interno (primeros 3 archivos):"
            ls -la /var/www/frontend/internal/ | head -3
            echo ""

            echo "✅ Deployment completado"
            echo ""
            echo "🌐 URLs disponibles:"
            echo "   Producción: http://app.converxa.com"
            echo "   Interno: http://internal-app.converxa.com"
            echo ""
            echo "📝 Siguiente paso: Configurar SSL con Let's Encrypt"

  notify-result:
    needs: frontend-deployment
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment result
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            if [ "${{ needs.frontend-deployment.result }}" = "success" ]; then
              echo "✅ Frontend deployment completado exitosamente"
              echo "🌐 Frontend disponible en:"
              echo "   Producción: http://app.converxa.com"
              echo "   Interno: http://internal-app.converxa.com"
            else
              echo "❌ Error en frontend deployment"
              echo "🔍 Revisar logs para más detalles"
            fi
