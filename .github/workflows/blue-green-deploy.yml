name: Blue-Green Deployment for Sofia Chat Backend

on:
  push:
    branches:
      - develop-v1
    paths:
      - '.github/workflows/**'
      - 'package.json'
      - 'scripts/**'
      - 'src/**'
      - 'Dockerfile'
      - 'docker-compose*.yml'
  workflow_dispatch:
    inputs:
      force_color:
        description: 'Force deployment to specific color (blue/green)'
        required: false
        type: choice
        options:
          - auto
          - blue
          - green
        default: 'auto'

env:
  DEPLOY_HOST: ${{ secrets.DEV2_SSH_HOST }}
  DEPLOY_USER: ${{ secrets.DEV2_SSH_USERNAME }}
  SSH_KEY: ${{ secrets.DEV2_SSH_PRIVATE_KEY }}
  PROJECT_PATH: /root/repos/sofia-chat-backend-v2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image_tag
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          IMAGE_TAG="${COMMIT_SHA}-${TIMESTAMP}"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Copy scripts to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          source: "scripts/blue-green/*"
          target: "/opt/sofia-chat/scripts/"
          strip_components: 2

      - name: Make scripts executable
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            chmod +x /opt/sofia-chat/scripts/*.sh

      - name: Check current Blue-Green status
        id: status_check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            cd ${{ env.PROJECT_PATH }}
            if [ -f .blue-green-state ]; then
              CURRENT_STATE=$(cat .blue-green-state)
            else
              CURRENT_STATE="blue"
              echo "blue" > .blue-green-state
            fi
            
            # Determine target color
            if [ "${{ github.event.inputs.force_color }}" = "blue" ]; then
              TARGET_COLOR="blue"
            elif [ "${{ github.event.inputs.force_color }}" = "green" ]; then
              TARGET_COLOR="green"
            else
              # Auto mode: deploy to inactive slot
              if [ "$CURRENT_STATE" = "blue" ]; then
                TARGET_COLOR="green"
              else
                TARGET_COLOR="blue"
              fi
            fi
            
            echo "CURRENT_STATE=$CURRENT_STATE" >> $GITHUB_ENV
            echo "TARGET_COLOR=$TARGET_COLOR" >> $GITHUB_ENV
            echo "current_state=$CURRENT_STATE" >> $GITHUB_OUTPUT
            echo "target_color=$TARGET_COLOR" >> $GITHUB_OUTPUT

      - name: Update repository and environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            cd ${{ env.PROJECT_PATH }}
            
            # Pull latest changes
            git fetch origin
            git checkout develop-v1
            git pull origin develop-v1
            
            # Create environment file
            cat <<EOF > .env
            NODE_ENV=production
            LOG_LEVEL=info
            TYPEORM_HOST=${{ secrets.DEV2_TYPEORM_HOST }}
            TYPEORM_PORT=${{ secrets.DEV2_TYPEORM_PORT }}
            TYPEORM_USERNAME=${{ secrets.DEV2_TYPEORM_USERNAME }}
            TYPEORM_PASSWORD=${{ secrets.DEV2_TYPEORM_PASSWORD }}
            TYPEORM_DB_NAME=${{ secrets.DEV2_TYPEORM_DB_NAME }}
            JWT_SECRET_KEY=${{ secrets.DEV2_JWT_SECRET_KEY }}
            JWT_SECRET_KEY_REFRESH=${{ secrets.DEV2_JWT_SECRET_KEY_REFRESH }}
            NODEMAILER_HOST=${{ secrets.DEV2_NODEMAILER_HOST }}
            NODEMAILER_PORT=${{ secrets.DEV2_NODEMAILER_PORT }}
            NODEMAILER_USER=${{ secrets.DEV2_NODEMAILER_USER }}
            NODEMAILER_PASS=${{ secrets.DEV2_NODEMAILER_PASS }}
            NODEMAILER_FROM=${{ secrets.DEV2_NODEMAILER_FROM }}
            URL_FILES=${{ secrets.DEV2_URL_FILES }}
            URL_WSS=${{ secrets.DEV2_URL_WSS }}
            URL_WEBHOOK_WA=${{ secrets.DEV2_URL_WEBHOOK_WA }}
            OPENAI_API_KEY=${{ secrets.DEV2_OPENAI_API_KEY }}
            FACEBOOK_APP_ID=${{ secrets.DEV2_FACEBOOK_APP_ID }}
            FACEBOOK_APP_SECRET=${{ secrets.DEV2_FACEBOOK_APP_SECRET }}
            FACEBOOK_WEBHOOK_SECRET=${{ secrets.DEV2_FACEBOOK_WEBHOOK_SECRET }}
            FACEBOOK_GRAPH_API=${{ secrets.DEV2_FACEBOOK_GRAPH_API }}
            APP_URL=${{ secrets.DEV2_APP_URL }}
            URL_FRONTEND=${{ secrets.DEV2_URL_FRONTEND }}
            MAILGUN_API_KEY=${{ secrets.DEV2_MAILGUN_API_KEY }}
            MAILGUN_DOMAIN=${{ secrets.DEV2_MAILGUN_DOMAIN }}
            MAILGUN_FROM=${{ secrets.DEV2_MAILGUN_FROM }}
            VOYAGE_API_KEY=${{ secrets.DEV2_VOYAGE_API_KEY }}
            CLAUDE_API_KEY=${{ secrets.DEV2_CLAUDE_API_KEY }}
            DOCKER_IMAGE_TAG=${{ steps.image_tag.outputs.tag }}
            EOF
            
            # Ensure pgvector is installed
            node src/config/install-pgvector.js || true

      - name: Deploy to target slot
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            cd ${{ env.PROJECT_PATH }}
            
            # Get target color from previous step
            TARGET_COLOR="${{ steps.status_check.outputs.target_color }}"
            
            echo "Deploying to $TARGET_COLOR slot..."
            
            # Build new image with unique tag
            docker build -t sofia-chat-backend:${{ steps.image_tag.outputs.tag }} .
            
            # Use docker-compose to deploy to target slot
            if [ "$TARGET_COLOR" = "green" ]; then
              docker-compose --profile green up -d sofia-chat-backend-green
            else
              docker-compose up -d sofia-chat-backend-blue
            fi
            
            # Update internal config to point to new slot
            /opt/sofia-chat/scripts/update-internal-config.sh $TARGET_COLOR

      - name: Verify deployment health
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            TARGET_COLOR="${{ steps.status_check.outputs.target_color }}"
            
            echo "Verificando salud del deployment en $TARGET_COLOR..."
            
            # Run health check on the deployed slot
            /opt/sofia-chat/scripts/health-check.sh check $TARGET_COLOR
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Deployment saludable en slot $TARGET_COLOR"
            else
              echo "‚ùå Problemas detectados en slot $TARGET_COLOR"
              exit 1
            fi

      - name: Update DNS configuration (if needed)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            # Ensure internal domain is configured
            if ! grep -q "internal-dev-sofia-chat.sofiacall.com" /etc/nginx/sites-enabled/internal-backend.conf 2>/dev/null; then
              echo "Configurando dominio interno para pruebas..."
              
              # Create SSL certificate for internal domain if not exists
              if [ ! -f /etc/letsencrypt/live/internal-dev-sofia-chat.sofiacall.com/fullchain.pem ]; then
                echo "AVISO: Certificado SSL para internal-dev-sofia-chat.sofiacall.com no encontrado"
                echo "Ejecutar manualmente: certbot --nginx -d internal-dev-sofia-chat.sofiacall.com"
              fi
            fi

      - name: Create deployment summary
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            echo "=================================="
            echo "   DEPLOYMENT SUMMARY"
            echo "=================================="
            echo "Commit: ${{ steps.image_tag.outputs.commit_sha }}"
            echo "Image Tag: ${{ steps.image_tag.outputs.tag }}"
            echo "Current Production: ${{ steps.status_check.outputs.current_state }}"
            echo "Deployed to Slot: ${{ steps.status_check.outputs.target_color }}"
            echo "=================================="
            echo ""
            echo "üîç Para probar el nuevo deployment:"
            echo "   https://internal-dev-sofia-chat.sofiacall.com"
            echo ""
            echo "‚úÖ Si las pruebas son exitosas, ejecutar switch:"
            echo "   /opt/sofia-chat/scripts/blue-green-control.sh switch"
            echo ""
            echo "‚ùå Si hay problemas, descartar deployment:"
            echo "   /opt/sofia-chat/scripts/blue-green-control.sh cleanup"
            echo ""
            echo "üìä Ver estado actual:"
            echo "   /opt/sofia-chat/scripts/blue-green-control.sh status"
            echo "=================================="

  notify-deployment:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
              echo "‚úÖ Blue-Green deployment completado exitosamente"
              echo "üß™ Nuevo c√≥digo disponible para pruebas en internal-dev-sofia-chat.sofiacall.com"
              echo "‚ö†Ô∏è  Requiere switch manual para pasar a producci√≥n"
            else
              echo "‚ùå Error en Blue-Green deployment"
              echo "üîç Revisar logs para m√°s detalles"
            fi