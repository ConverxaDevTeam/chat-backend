name: Blue-Green Deployment for Sofia Chat Backend

on:
  push:
    branches:
      - develop-v1
    paths:
      - '.github/workflows/**'
      - 'package.json'
      - 'scripts/**'
      - 'src/**'
      - 'Dockerfile'
      - 'docker-compose*.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Blue-Green action to perform'
        required: true
        type: choice
        options:
          - deploy
          - switch
          - rollback
          - status
        default: 'deploy'
env:
  DEPLOY_HOST: ${{ secrets.DEV_SSH_HOST }}
  DEPLOY_USER: ${{ secrets.DEV_SSH_USERNAME }}
  SSH_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
  PROJECT_PATH: /root/repos/sofia-chat-backend-v2

jobs:
  blue-green-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy updated blue-green scripts to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          source: 'scripts/blue-green/*'
          target: '/opt/sofia-chat/scripts/'
          strip_components: 2

      - name: Make scripts executable
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            chmod +x /opt/sofia-chat/scripts/*.sh
            echo "Blue-green scripts updated and made executable"

      - name: Update repository and environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            cd ${{ env.PROJECT_PATH }}

            # Pull latest changes
            git fetch origin
            git checkout develop-v1
            git pull origin develop-v1

            # Create environment file with proper quoting
            cat > .env << 'ENV_EOF'
            NODE_ENV=development
            LOG_LEVEL=info
            TYPEORM_HOST=${{ secrets.DEV_TYPEORM_HOST }}
            TYPEORM_PORT=${{ secrets.DEV_TYPEORM_PORT }}
            TYPEORM_USERNAME=${{ secrets.DEV_TYPEORM_USERNAME }}
            TYPEORM_PASSWORD=${{ secrets.DEV_TYPEORM_PASSWORD }}
            TYPEORM_DB_NAME=${{ secrets.DEV_TYPEORM_DB_NAME }}
            JWT_SECRET_KEY=${{ secrets.DEV_JWT_SECRET_KEY }}
            JWT_SECRET_KEY_REFRESH=${{ secrets.DEV_JWT_SECRET_KEY_REFRESH }}
            NODEMAILER_HOST=${{ secrets.DEV_NODEMAILER_HOST }}
            NODEMAILER_PORT=${{ secrets.DEV_NODEMAILER_PORT }}
            NODEMAILER_USER=${{ secrets.DEV_NODEMAILER_USER }}
            NODEMAILER_PASS=${{ secrets.DEV_NODEMAILER_PASS }}
            NODEMAILER_FROM=${{ secrets.DEV_NODEMAILER_FROM }}
            URL_FILES=${{ secrets.DEV_URL_FILES }}
            URL_WSS=${{ secrets.DEV_URL_WSS }}
            URL_WEBHOOK_WA=${{ secrets.DEV_URL_WEBHOOK_WA }}
            OPENAI_API_KEY=${{ secrets.DEV_OPENAI_API_KEY }}
            FACEBOOK_APP_ID=${{ secrets.DEV_FACEBOOK_APP_ID }}
            FACEBOOK_APP_SECRET=${{ secrets.DEV_FACEBOOK_APP_SECRET }}
            FACEBOOK_WEBHOOK_SECRET=${{ secrets.DEV_FACEBOOK_WEBHOOK_SECRET }}
            FACEBOOK_GRAPH_API=${{ secrets.DEV_FACEBOOK_GRAPH_API }}
            APP_URL=${{ secrets.DEV_APP_URL }}
            URL_FRONTEND=${{ secrets.DEV_URL_FRONTEND }}
            MAILGUN_API_KEY=${{ secrets.DEV_MAILGUN_API_KEY }}
            MAILGUN_DOMAIN=${{ secrets.DEV_MAILGUN_DOMAIN }}
            MAILGUN_FROM=${{ secrets.DEV_MAILGUN_FROM }}
            VOYAGE_API_KEY=${{ secrets.DEV_VOYAGE_API_KEY }}
            CLAUDE_API_KEY=${{ secrets.DEV_CLAUDE_API_KEY }}
            CUSTOM_PLAN_REQUEST_RECIPIENT_EMAIL=${{ secrets.DEV_CUSTOM_PLAN_REQUEST_RECIPIENT_EMAIL }}
            ENV_EOF

            # Ensure pgvector is installed
            node src/config/install-pgvector.js || true

      - name: Execute Blue-Green Action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            cd ${{ env.PROJECT_PATH }}

            # Determine action
            ACTION="${{ github.event.inputs.action || 'deploy' }}"

            echo "Ejecutando acción Blue-Green: $ACTION"

            # Execute the blue-green script from project directory
            PROJECT_DIR=${{ env.PROJECT_PATH }} /opt/sofia-chat/scripts/blue-green-control.sh $ACTION

      - name: Show deployment summary
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            echo "=================================="
            echo "   BLUE-GREEN DEPLOYMENT SUMMARY"
            echo "=================================="
            echo "Acción ejecutada: ${{ github.event.inputs.action || 'deploy' }}"
            echo "Commit: $(cd ${{ env.PROJECT_PATH }} && git rev-parse --short HEAD)"
            echo "Timestamp: $(date)"
            echo "=================================="
            echo ""

            # Show current status
            /opt/sofia-chat/scripts/blue-green-control.sh status

            echo ""
            echo "🔧 Comandos disponibles:"
            echo "  - Ver estado: /opt/sofia-chat/blue-green-simple.sh status"
            echo "  - Hacer switch: /opt/sofia-chat/blue-green-simple.sh switch"
            echo "  - Rollback: /opt/sofia-chat/blue-green-simple.sh rollback"
            echo "  - Limpiar: /opt/sofia-chat/blue-green-simple.sh cleanup"
            echo ""
            echo "🌐 URLs de prueba:"
            echo "  - Blue (3001): http://dev-sofia-chat.sofiacall.com:3001/health"
            echo "  - Green (3002): http://dev-sofia-chat.sofiacall.com:3002/health"

  notify-result:
    needs: blue-green-deployment
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment result
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DEPLOY_HOST }}
          username: ${{ env.DEPLOY_USER }}
          key: ${{ env.SSH_KEY }}
          port: 22
          script: |
            if [ "${{ needs.blue-green-deployment.result }}" = "success" ]; then
              echo "✅ Blue-Green deployment completado exitosamente"
              echo "📋 Ejecuta '/opt/sofia-chat/blue-green-simple.sh status' para ver el estado actual"
            else
              echo "❌ Error en Blue-Green deployment"
              echo "🔍 Revisar logs para más detalles"
              echo "📋 Estado actual:"
              /opt/sofia-chat/scripts/blue-green-control.sh status || echo "No se pudo obtener el estado"
            fi
